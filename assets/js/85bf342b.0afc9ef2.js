"use strict";(self.webpackChunkumlcloudcomputing=self.webpackChunkumlcloudcomputing||[]).push([[9291],{2390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"activities/PhotoSky/Part 1: AWS Infrastructure and Backend/deploying-and-testing-backend","title":"Deploying and Testing the Backend","description":"In this final section of Part 1, we\'ll deploy our PhotoSky backend to AWS and thoroughly test it to ensure everything is working correctly. We\'ll use the AWS CDK to deploy our stack and then use various tools to test our API endpoints.","source":"@site/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/6-deploying-and-testing-backend.md","sourceDirName":"activities/PhotoSky/Part 1: AWS Infrastructure and Backend","slug":"/activities/part-1-aws-infrastructure-and-backend/6-deploying-and-testing-backend","permalink":"/docs/activities/part-1-aws-infrastructure-and-backend/6-deploying-and-testing-backend","draft":false,"unlisted":false,"editUrl":"https://github.com/UMLCloudComputing/UMLCloudComputing.github.io/edit/main/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/6-deploying-and-testing-backend.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"slug":"/activities/part-1-aws-infrastructure-and-backend/6-deploying-and-testing-backend"},"sidebar":"activitiesSidebar","previous":{"title":"Creating the Lambda Function","permalink":"/docs/activities/part-1-aws-infrastructure-and-backend/5-creating-lambda-function"},"next":{"title":"Part 2: Frontend Development and Integration","permalink":"/docs/part-2-frontend-development-and-integration"}}');var i=t(4848),r=t(8453);const a={sidebar_position:6,slug:"/activities/part-1-aws-infrastructure-and-backend/6-deploying-and-testing-backend"},o="Deploying and Testing the Backend",l={},d=[{value:"Deploying the Backend",id:"deploying-the-backend",level:2},{value:"\u2757 Prerequisites",id:"-prerequisites",level:3},{value:"Deployment Steps",id:"deployment-steps",level:3},{value:"Testing the Backend",id:"testing-the-backend",level:2},{value:"1. Get Presigned URL for Upload",id:"1-get-presigned-url-for-upload",level:3},{value:"2. Upload an Image",id:"2-upload-an-image",level:3},{value:"3. List Images",id:"3-list-images",level:3},{value:"4. Get Image URL",id:"4-get-image-url",level:3},{value:"5. Get Image Preview URL",id:"5-get-image-preview-url",level:3},{value:"6. Delete Image",id:"6-delete-image",level:3},{value:"Automated Testing Script",id:"automated-testing-script",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Monitoring and Maintenance",id:"monitoring-and-maintenance",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",div:"div",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deploying-and-testing-the-backend",children:"Deploying and Testing the Backend"})}),"\n",(0,i.jsx)(n.p,{children:"In this final section of Part 1, we'll deploy our PhotoSky backend to AWS and thoroughly test it to ensure everything is working correctly. We'll use the AWS CDK to deploy our stack and then use various tools to test our API endpoints."}),"\n",(0,i.jsx)(n.h2,{id:"deploying-the-backend",children:"Deploying the Backend"}),"\n",(0,i.jsx)(n.h3,{id:"-prerequisites",children:"\u2757 Prerequisites"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure you have the AWS CLI configured with the correct credentials"}),"\n",(0,i.jsx)(n.li,{children:"Make sure you have the latest version of the AWS CDK installed"}),"\n",(0,i.jsx)(n.li,{children:"Verify that you're in the root directory of your project"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"deployment-steps",children:"Deployment Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Synthesize the CloudFormation template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cdk synth\n"})}),"\n",(0,i.jsx)(n.p,{children:"This command will generate a CloudFormation template based on our CDK code. Review the output to ensure it looks correct."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Deploy the stack:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cdk deploy\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This command will deploy our stack to AWS. You'll be prompted to confirm the changes before they're applied."})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"During the deployment, you'll see output detailing the resources being created. Pay attention to any warnings or errors."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Once the deployment is complete, you'll see output containing the API Gateway URL. It will look ",(0,i.jsx)(n.em,{children:"something"})," like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Outputs:\nPhotoskyStack.apiEndpoint12345678 = https://abcdefghij.execute-api.us-east-1.amazonaws.com/prod/\n"})}),"\n",(0,i.jsx)(n.p,{children:"Copy this URL; you'll need it for testing and for your frontend."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Update your ",(0,i.jsx)(n.code,{children:".env"})," file with this URL by running the following command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'echo "REACT_APP_API_URL=https://abcdefghij.execute-api.us-east-1.amazonaws.com/prod" >> .env\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Replace the URL with your actual API Gateway URL you obtained in the previous step."})}),"\n",(0,i.jsx)(n.h2,{id:"testing-the-backend",children:"Testing the Backend"}),"\n",(0,i.jsx)(n.p,{children:"Now that our backend is deployed, let's thoroughly test each of our API endpoints. We'll use curl for these examples, but you could also use tools like Postman or a custom Python script for more advanced testing."}),"\n",(0,i.jsx)(n.h3,{id:"1-get-presigned-url-for-upload",children:"1. Get Presigned URL for Upload"}),"\n",(0,i.jsx)(n.p,{children:"Test the endpoint to get a presigned URL for uploading an image by running the following command in your shell:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST \\\n  YOUR_PRESIGNED_URL \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{"filename":"test-image.jpg", "filetype":"image/jpeg"}\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"Expected response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "url": "https://YOUR-BUCKET-NAME.s3.amazonaws.com/",\n  "fields": {\n    "key": "test-image.jpg",\n    "bucket": "YOUR-BUCKET-NAME",\n    "X-Amz-Algorithm": "AWS4-HMAC-SHA256",\n    ...\n  }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Replace the ",(0,i.jsx)(n.code,{children:"YOUR_PRESIGNED_URL"})," with the URL you obtained ",(0,i.jsx)(n.a,{href:"#1-get-presigned-url-for-upload",children:"before"})," from the response.",(0,i.jsx)("br",{}),"\nThe filename parameter can also be changed to be specific to the name of the file you intend to upload in the next step."]})}),"\n",(0,i.jsx)(n.h3,{id:"2-upload-an-image",children:"2. Upload an Image"}),"\n",(0,i.jsx)(n.p,{children:"To actually upload an image using the presigned URL use the following command in your shell:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -X POST YOUR_PRESIGNED_URL \\\n  -F key=test-image.jpg \\\n  -F bucket=YOUR-BUCKET-NAME \\\n  -F X-Amz-Algorithm=AWS4-HMAC-SHA256 \\\n  ... \\\n  -F file=@/PATH-TO-YOUR-IMAGE.jpg\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Replace the ",(0,i.jsx)(n.code,{children:"YOUR_PRESIGNED_URL"})," with the URL you obtained ",(0,i.jsx)(n.a,{href:"#1-get-presigned-url-for-upload",children:"before"})," from the response.",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"YOUR-BUCKET-NAME"})," is specified within your presigned URL as the content between ",(0,i.jsx)(n.code,{children:"https://"})," and ",(0,i.jsx)(n.code,{children:".s3.amazonaws.com/"}),". ",(0,i.jsx)("br",{}),"\nThe ",(0,i.jsx)(n.code,{children:"file"})," parameter should be specified with the path to the image you intend to your upload."]})}),"\n",(0,i.jsx)(n.h3,{id:"3-list-images",children:"3. List Images"}),"\n",(0,i.jsx)(n.p,{children:"Test the endpoint to list all images:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl YOUR_API_GATEWAY_URL/list-images\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Replace the ",(0,i.jsx)(n.code,{children:"YOUR_API_GATEWAY_URL"})," with the URL you obtained ",(0,i.jsx)(n.a,{href:"#deployment-steps",children:"before"})," in step 4. This URL should be trailed with ",(0,i.jsx)(n.code,{children:"/list-images"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"Expected response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "images": [\n    {\n      "id": "YOUR_UPLOADED_IMAGE.jpg",\n      "url": "https://YOUR-BUCKET-NAME.s3.amazonaws.com/YOUR_UPLOADED_IMAGE.jpg?AWSAccessKeyId=..."\n    },\n    ...\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-get-image-url",children:"4. Get Image URL"}),"\n",(0,i.jsx)(n.p,{children:"Test getting a URL for a specific image by running teh following command in your shell:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl YOUR_PRESIGNED_URL/YOUR_UPLOADED_IMAGE.jpg\n"})}),"\n",(0,i.jsx)(n.p,{children:"Expected response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"url": "https://YOUR-BUCKET-NAME.s3.amazonaws.com/test-image.jpg?AWSAccessKeyId=..."}\n'})}),"\n",(0,i.jsx)(n.div,{}),"\n",(0,i.jsxs)(n.p,{children:["Replace the ",(0,i.jsx)(n.code,{children:"YOUR_PRESIGNED_URL"})," with the URL you obtained ",(0,i.jsx)(n.a,{href:"#1-get-presigned-url-for-upload",children:"before"})," from the response.",(0,i.jsx)("br",{}),"\nBe sure to trail the URL with the name of the file you just uploaded.",(0,i.jsx)("br",{}),'\nBe sure to encapsulate your final URL in double quotes ("...").\n:::']}),"\n",(0,i.jsx)(n.h3,{id:"5-get-image-preview-url",children:"5. Get Image Preview URL"}),"\n",(0,i.jsx)(n.p,{children:"Test getting a preview URL for an image:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl "YOUR_PRESIGNED_URL/YOUR_UPLOADED_IMAGE.jpg?preview=true"\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Replace the ",(0,i.jsx)(n.code,{children:"YOUR_PRESIGNED_URL"})," with the URL you obtained ",(0,i.jsx)(n.a,{href:"#1-get-presigned-url-for-upload",children:"before"})," from the response.",(0,i.jsx)("br",{}),"\nBe sure to trail the URL with the name of image you just uploaded.",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(n.p,{children:"Expected response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"url": "https://YOUR-BUCKET-NAME.s3.amazonaws.com/preview_test-image.jpg?AWSAccessKeyId=..."}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"6-delete-image",children:"6. Delete Image"}),"\n",(0,i.jsx)(n.p,{children:"Test deleting an image:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -X DELETE YOUR_PRESIGNED_URL/delete-image/YOUR_UPLOADED_IMAGE.jpg\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Replace the ",(0,i.jsx)(n.code,{children:"YOUR_PRESIGNED_URL"})," with the URL you obtained ",(0,i.jsx)(n.a,{href:"#1-get-presigned-url-for-upload",children:"before"})," from the response.",(0,i.jsx)("br",{}),"\nBe sure to trail the URL with the name of image you just uploaded.",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(n.p,{children:"Expected response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"message": "Image deleted successfully"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"automated-testing-script",children:"Automated Testing Script"}),"\n",(0,i.jsx)(n.p,{children:"For more comprehensive testing, you can create a Python script that automates these tests. Here's an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import requests\nimport json\nimport os\n\nAPI_URL = "https://abcdefghij.execute-api.us-east-1.amazonaws.com/prod"\n\ndef test_list_images():\n    response = requests.get(f"{API_URL}/list-images")\n    assert response.status_code == 200\n    data = response.json()\n    assert "images" in data\n    print("List images test passed")\n\ndef test_upload_image():\n    # Get presigned URL\n    response = requests.post(f"{API_URL}/get-presigned-url", json={"filename": "test-image.jpg", "filetype": "image/jpeg"})\n    assert response.status_code == 200\n    presigned_data = response.json()\n    \n    # Upload image\n    with open("test-image.jpg", "rb") as f:\n        files = {"file": f}\n        response = requests.post(presigned_data["url"], data=presigned_data["fields"], files=files)\n    assert response.status_code == 204\n    print("Upload image test passed")\n\ndef test_get_image_url():\n    response = requests.get(f"{API_URL}/test-image.jpg")\n    assert response.status_code == 200\n    data = response.json()\n    assert "url" in data\n    print("Get image URL test passed")\n\ndef test_get_preview_url():\n    response = requests.get(f"{API_URL}/test-image.jpg?preview=true")\n    assert response.status_code == 200\n    data = response.json()\n    assert "url" in data\n    print("Get preview URL test passed")\n\ndef test_delete_image():\n    response = requests.delete(f"{API_URL}/delete-image/test-image.jpg")\n    assert response.status_code == 200\n    data = response.json()\n    assert data["message"] == "Image deleted successfully"\n    print("Delete image test passed")\n\nif __name__ == "__main__":\n    test_list_images()\n    test_upload_image()\n    test_get_image_url()\n    test_get_preview_url()\n    test_delete_image()\n    print("All tests passed successfully!")\n'})}),"\n",(0,i.jsx)(n.p,{children:"To run this script:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Save it as ",(0,i.jsx)(n.code,{children:"test_backend.py"})]}),"\n",(0,i.jsxs)(n.li,{children:["Install the requests library if you haven't already: ",(0,i.jsx)(n.code,{children:"pip install requests"})]}),"\n",(0,i.jsxs)(n.li,{children:["Run the script: ",(0,i.jsx)(n.code,{children:"python test_backend.py"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.p,{children:"If you encounter any issues during testing:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Check the CloudWatch Logs for your Lambda function. You can find these in the AWS Console under CloudWatch > Log groups."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Ensure your IAM permissions are set up correctly. The Lambda function should have permissions to access the S3 bucket."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Verify that your S3 bucket name in the Lambda function environment variables matches the actual bucket name."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If you make any changes to your Lambda function code, remember to redeploy your stack with ",(0,i.jsx)(n.code,{children:"cdk deploy"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Check your API Gateway settings in the AWS Console to ensure CORS is properly configured."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"If you're having issues with the presigned URLs, make sure your system time is synchronized correctly."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-and-maintenance",children:"Monitoring and Maintenance"}),"\n",(0,i.jsx)(n.p,{children:"To ensure the ongoing health of your backend:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Set up CloudWatch Alarms for important metrics like Lambda function errors and API Gateway 4xx/5xx errors."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Regularly review your CloudWatch Logs for any recurring issues or patterns."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Keep your dependencies up-to-date, including the AWS SDK and any other libraries used in your Lambda function."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Periodically review and update your IAM policies to adhere to the principle of least privilege."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Congratulations! You've successfully deployed and thoroughly tested your PhotoSky backend. Your AWS infrastructure is now set up with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"An S3 bucket for storing images"}),"\n",(0,i.jsx)(n.li,{children:"A Lambda function for handling image operations"}),"\n",(0,i.jsx)(n.li,{children:"An API Gateway for exposing your Lambda function as a RESTful API"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following this comprehensive testing procedure, you can be confident that your backend is functioning correctly and ready for integration with your frontend application."}),"\n",(0,i.jsx)(n.p,{children:"Remember to keep your API Gateway URL handy, as you'll need it when configuring your frontend application in the next part of this tutorial. In Part 2, we'll build the frontend of our application to interact with this robust backend we've just created and tested."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);