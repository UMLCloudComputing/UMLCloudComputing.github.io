"use strict";(self.webpackChunkumlcloudcomputing=self.webpackChunkumlcloudcomputing||[]).push([[1846],{515:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"activities/PhotoSky/Part 2: Frontend Development and Integration/integrating-backend-api","title":"Integrating the Backend API","description":"In this section, we\'ll dive into how our React frontend integrates with the backend API we built in Part 1. We\'ll explore the API calls for fetching, uploading, and deleting images, as well as how we handle the camera integration for capturing new images.","source":"@site/docs/activities/PhotoSky/Part 2: Frontend Development and Integration/5-integrating-backend-api.md","sourceDirName":"activities/PhotoSky/Part 2: Frontend Development and Integration","slug":"/activities/part-2-frontend-development-and-integration/4-integrating-backend-api","permalink":"/docs/activities/part-2-frontend-development-and-integration/4-integrating-backend-api","draft":false,"unlisted":false,"editUrl":"https://github.com/UMLCloudComputing/UMLCloudComputing.github.io/edit/main/docs/activities/PhotoSky/Part 2: Frontend Development and Integration/5-integrating-backend-api.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"slug":"/activities/part-2-frontend-development-and-integration/4-integrating-backend-api"},"sidebar":"activitiesSidebar","previous":{"title":"Handling Image Upload and Camera Integration","permalink":"/docs/activities/part-2-frontend-development-and-integration/4-implementing-image-upload-and-camera"},"next":{"title":"Testing and Deployment","permalink":"/docs/activities/part-2-frontend-development-and-integration/6-testing-and-deployment"}}');var i=a(4848),r=a(8453);const s={sidebar_position:4,slug:"/activities/part-2-frontend-development-and-integration/4-integrating-backend-api"},o="Integrating the Backend API",l={},c=[{value:"Setting Up Axios and Environment Variables",id:"setting-up-axios-and-environment-variables",level:2},{value:"Implementing API Calls",id:"implementing-api-calls",level:2},{value:"Fetching Images",id:"fetching-images",level:3},{value:"Uploading Images",id:"uploading-images",level:3},{value:"Deleting Images",id:"deleting-images",level:3},{value:"Camera Integration",id:"camera-integration",level:2},{value:"Error Handling and Notifications",id:"error-handling-and-notifications",level:2},{value:"Loading State",id:"loading-state",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"integrating-the-backend-api",children:"Integrating the Backend API"})}),"\n",(0,i.jsx)(n.p,{children:"In this section, we'll dive into how our React frontend integrates with the backend API we built in Part 1. We'll explore the API calls for fetching, uploading, and deleting images, as well as how we handle the camera integration for capturing new images."}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-axios-and-environment-variables",children:"Setting Up Axios and Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"We're using Axios, a popular HTTP client, to make requests to our API endpoints. The base URL for our API is stored in an environment variable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const API_URL = process.env.REACT_APP_API_URL;\n"})}),"\n",(0,i.jsx)(n.p,{children:"To set up your environment variables:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In the root of your project, create a ",(0,i.jsx)(n.code,{children:".env"})," file if it doesn't exist already."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add the following line, replacing the URL with your actual API Gateway URL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"REACT_APP_API_URL=https://{YOUR_API_ID}.execute-api.{YOUR_REGION}.amazonaws.com/prod\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Restart your development server for the changes to take effect."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementing-api-calls",children:"Implementing API Calls"}),"\n",(0,i.jsx)(n.p,{children:"Let's go through the main API integrations in our application:"}),"\n",(0,i.jsx)(n.h3,{id:"fetching-images",children:"Fetching Images"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"fetchImages"})," function retrieves the list of images from our backend:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const fetchImages = useCallback(async () => {\n  // set loading state to true\n  setLoading(true);\n  try {\n    // query api and set state with response\n    const response = await axios.get(`${API_URL}/list-images`);\n    setImages(response.data.images);\n    enqueueSnackbar('Images loaded successfully', { variant: 'success' });\n  } catch (error) {\n    // handle error\n    console.error('Error fetching images:', error);\n    enqueueSnackbar('Error fetching images', { variant: 'error' });\n  } finally {\n    // will be called regardless of error\n    setLoading(false);\n  }\n}, [API_URL, enqueueSnackbar]);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function is called when the component mounts and whenever we need to refresh the image list. Note the use of ",(0,i.jsx)(n.code,{children:"setLoading"})," to manage the loading state, and ",(0,i.jsx)(n.code,{children:"enqueueSnackbar"})," for user notifications."]}),"\n",(0,i.jsx)(n.h3,{id:"uploading-images",children:"Uploading Images"}),"\n",(0,i.jsx)(n.p,{children:"The image upload process involves two steps: getting a presigned URL from our backend, then using that URL to upload the file directly to S3:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const uploadImage = useCallback(async (file) => {\n  setLoading(true);\n  try {\n    // Get a presigned URL for the upload\n    const presignedResponse = await axios.post(`${API_URL}/get-presigned-url`, {\n      filename: file.name,\n      filetype: file.type\n    });\n\n    const { url, fields } = presignedResponse.data;\n    const formData = new FormData();\n\n    // append presigned url fields and uploaded file to formData\n    // the formData object is what will be submitted\n    Object.entries(fields).forEach(([key, value]) => formData.append(key, value));\n    formData.append('file', file);\n\n    // Upload the file\n    await axios.post(url, formData, { headers: { 'Content-Type': 'multipart/form-data' } });\n\n    fetchImages();\n    enqueueSnackbar('Image uploaded successfully', { variant: 'success' });\n  } catch (error) {\n    // handle error\n    console.error('Error uploading image:', error);\n    enqueueSnackbar('Error uploading image', { variant: 'error' });\n  } finally {\n    // set loading state once we have finished\n    setLoading(false);\n  }\n}, [API_URL, enqueueSnackbar, fetchImages]);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deleting-images",children:"Deleting Images"}),"\n",(0,i.jsx)(n.p,{children:"We have two delete functions: one for deleting a single image and one for deleting all images:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const handleDeleteImage = useCallback(async (id) => {\n  // set loading state\n  setLoading(true);\n  try {\n    // query api\n    await axios.delete(`${API_URL}/delete-image/${id}`);\n    fetchImages();\n    enqueueSnackbar('Image deleted successfully', { variant: 'success' });\n    // close dialog once the image has been deleted\n    setDialogOpen(false);\n  } catch (error) {\n    // handle error\n    console.error('Error deleting image:', error);\n    enqueueSnackbar('Error deleting image', { variant: 'error' });\n  } finally {\n    // set loading state once we have finished\n    setLoading(false);\n  }\n}, [API_URL, enqueueSnackbar, fetchImages]);\n\nconst handleDeleteAllImages = useCallback(async () => {\n  // set loading state\n  setLoading(true);\n  try {\n  // this will loop over all of the images, calling the api to delete each one\n    const deletePromises = images.map((image) => axios.delete(`${API_URL}/delete-image/${image.id}`));\n    await Promise.all(deletePromises);\n    fetchImages();\n    enqueueSnackbar('All images deleted successfully', { variant: 'success' });\n  } catch (error) {\n    // handle error\n    console.error('Error deleting all images:', error);\n    enqueueSnackbar('Error deleting all images', { variant: 'error' });\n  } finally {\n    // set loading state once we have finished\n    setLoading(false);\n  }\n}, [API_URL, images, enqueueSnackbar, fetchImages]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"camera-integration",children:"Camera Integration"}),"\n",(0,i.jsx)(n.p,{children:"We're using the Capacitor Camera plugin to capture images on mobile devices. Here's how we integrate it with our upload process:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const takePicture = useCallback(async () => {\n  setImageDialogOpen(false);\n  try {\n    const image = await Camera.getPhoto({\n      quality: 90,\n      allowEditing: true,\n      resultType: CameraResultType.Uri\n    });\n\n    // Generate a random unique ID for the file name\n    const randomFileName = `captured-image-${Date.now()}-${Math.random().toString(36).substring(2, 15)}.jpg`;\n\n    const file = await fetch(image.webPath)\n      .then(res => res.blob())\n      .then(blob => new File([blob], randomFileName, { type: 'image/jpeg' }));\n    \n    await uploadImage(file);\n  } catch (error) {\n    console.error('Error capturing image:', error);\n    enqueueSnackbar('Error capturing image', { variant: 'error' });\n  }\n}, [uploadImage, enqueueSnackbar]);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function uses the Capacitor Camera API to capture a photo, converts the result to a File object, and then uses our ",(0,i.jsx)(n.code,{children:"uploadImage"})," function to send it to the server."]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling-and-notifications",children:"Error Handling and Notifications"}),"\n",(0,i.jsxs)(n.p,{children:["We're using the ",(0,i.jsx)(n.code,{children:"enqueueSnackbar"})," function from the ",(0,i.jsx)(n.code,{children:"notistack"})," library to display user-friendly error messages and notifications. Each API call is wrapped in a try-catch block to handle potential errors:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"try {\n  // API call\n  enqueueSnackbar('Success message', { variant: 'success' });\n} catch (error) {\n  console.error('Error description:', error);\n  enqueueSnackbar('Error message', { variant: 'error' });\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"To set up notistack:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Wrap your main App component with SnackbarProvider:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { SnackbarProvider } from 'notistack';\n\nexport default function App() {\n  return (\n    <SnackbarProvider maxSnack={3} autoHideDuration={3000}>\n      <Album />\n    </SnackbarProvider>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"useSnackbar"})," hook in your components:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { useSnackbar } from 'notistack';\n\nfunction Album() {\n  const { enqueueSnackbar } = useSnackbar();\n  // ... rest of the component\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"loading-state",children:"Loading State"}),"\n",(0,i.jsxs)(n.p,{children:["We use a ",(0,i.jsx)(n.code,{children:"loading"})," state variable to track when API calls are in progress. This is used to display a loading indicator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const [loading, setLoading] = useState(false);\n\n// In your JSX:\n{loading && <LinearProgress />}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"We've successfully integrated our backend API with our React frontend. Our application now can:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Fetch and display images from the server"}),"\n",(0,i.jsx)(n.li,{children:"Upload images, both from file selection and camera capture"}),"\n",(0,i.jsx)(n.li,{children:"Delete individual images and all images"}),"\n",(0,i.jsx)(n.li,{children:"Handle errors and provide user feedback using notistack"}),"\n",(0,i.jsx)(n.li,{children:"Show loading states during API operations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This integration creates a seamless experience for users, allowing them to interact with their cloud-stored images effortlessly. In the next section, we'll look at how to package our application for Android using Capacitor."})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);